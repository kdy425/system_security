import datetime
import psutil
from tabulate import tabulate
import os
import time
import ctypes
import hashlib

def get_processes():
    procs = []  #각 프로세스의 정보를 저장 리스트
    for p in psutil.process_iter(): #현재 실행 중인 모든 프로세스를 순회
        with p.oneshot():   #각 프로세스에 대한 정보를 한 번에 모두 가져오는 것이 아니라 필요한 정보를 필요할 때마다 개별적으로 가져옴
            pid = p.pid
            if pid == 0:    #프로세스의 PID(프로세스 식별자)
                continue
            name = p.name()  #프로세스 이름
            try:
                create_time = datetime.datetime.fromtimestamp(p.create_time())  #생성된 시간
            except OSError:
                create_time = datetime.datetime.fromtimestamp(psutil.boot_time())
            cpu_usage = p.cpu_percent() #cpu 사용률
            try:
                cpu_affinity = len(p.cpu_affinity())    #프로세스가 사용하는 CPU 코어의 개수
            except psutil.AccessDenied:
                cpu_affinity = 0
            status = p.status() #프로세스의 상태
            #try:
                #memory = p.memory_full_info().uss   #프로세스가 사용하는 메모리 양
            #except psutil.AccessDenied:
                #memory = 0
            try:
                user = p.username() #프로세스를 실행하는 사용자
            except psutil.AccessDenied:
                user = "N/A"
            
            # 네트워크 연결 정보를 가져옴
            network_connections = get_network_connections(pid)
            # 열린 포트 정보를 가져옴
            open_ports = get_open_ports(pid)

#print할 부분
        procs.append({
            'pid': pid,
            'name': name,
            'create_time': create_time,
            'cpu_usage': cpu_usage,
            'cpu_affinity': cpu_affinity,
            'status': status,
            #'memory': get_size(memory),
            'user': user,
            'network_connection': "Yes" if network_connections else "No",  # 네트워크 사용 여부 추가
            'open_ports': ', '.join(map(str, open_ports))  # 열린 포트 정보를 문자열로 출력
        })
    return procs


#바이트 크기를 가장 적합한 단위로 변환하여 문자열로 반환하는 함수
def get_size(bytes):
    for i in ['', 'K', 'M', 'G', 'T', 'P', 'E']:    #킬로바이트, 메가바이트 ...
        if bytes < 1024:
            return f"{bytes:.2f}{i}B"
        bytes /= 1024

#print 함수   
def print_processes(ps):
    print(tabulate(ps, headers="keys", tablefmt='simple'))

#네트워크 연결 유무
def get_network_connections(pid):
    try:
        connections = psutil.net_connections(kind='all')     #현재 시스템의 모든 네트워크 연결 정보 가져옴
        pid_connections = [conn for conn in connections if conn.pid == pid] #pid 가 매개변수로 전달된 pid 와 일치하는 프로세스 연결 정보만을 걸래냄
        return pid_connections
    except Exception as e:
        print(f"Error fetching network connections: {e}")
        return []
    
#열린포트 번호    
def get_open_ports(pid):
    try:
        connections = psutil.net_connections(kind='inet')    # IPv4 주소 체계에 기반한 연결 정보를 검색하라는 것을 나타냄
        pid_ports = [conn.laddr.port for conn in connections if conn.pid == pid]    #각 연결 정보에서 laddr.port는 로컬 주소의 포트 번호를 나타냄
        return pid_ports
    except Exception as e:
        print(f"Error fetching open ports: {e}")
        return []

def get_parent_processes():
    parent_processes = {}
    for process in psutil.process_iter(attrs=['pid', 'name', 'status', 'ppid']):  # 'ppid' 필드 추가
        try:
            parent_pid = process.info['ppid']
            pid = process.info['pid']
            name = process.info['name']
            status = process.info['status']
            parent_processes[pid] = {'parent_pid': parent_pid, 'parent_name': name, 'parent_status': status}
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    return parent_processes

# 파일의 해시값을 계산하는 함수
def calculate_file_hash(file_path):
    hash_object = hashlib.sha256()  # 필요에 따라 다른 해시 알고리즘을 선택
    with open(file_path, 'rb') as file:
        while True:
            data = file.read(65536)  # 파일을 64KB 덩어리로 읽기
            if not data:
                break
            hash_object.update(data)
    return hash_object.hexdigest()

# 프로세스의 파일 해시값 계산
def calculate_process_file_hashes(pid):
    file_hashes = {}
    try:
        process = psutil.Process(pid)
        for file_obj in process.open_files():
            file_path = file_obj.path
            file_hash = calculate_file_hash(file_path)
            file_hashes[file_path] = file_hash
    except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
        pass
    return file_hashes

# 프로세스 정보 출력 함수
def print_processes(ps):
    for p in ps:
        parent_info = get_parent_processes().get(p['pid'], {})
        p.update(parent_info)

        # 프로세스 파일에 대한 해시 계산 및 열 추가
        file_hashes = calculate_process_file_hashes(p['pid'])
        p['file_hashes'] = ', '.join(f"{file}: {hash}" for file, hash in file_hashes.items())

    headers = ["pid", "name", "create_time", "cpu_usage", "cpu_affinity", "status", "user", "network_connection", "open_ports", "parent_pid", "parent_name", "parent_status", "file_hashes"]
    headers_str = headers
    print(tabulate([list(p.values()) for p in ps], headers=headers_str, tablefmt='simple'))



# 실행
if __name__ == "__main__":
    procs = get_processes()
    print_processes(procs)
